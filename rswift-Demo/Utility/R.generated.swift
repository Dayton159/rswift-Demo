//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 11 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `auroraGreen`.
    static let auroraGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "auroraGreen")
    /// Color `baraRed`.
    static let baraRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "baraRed")
    /// Color `forgottenPurple`.
    static let forgottenPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "forgottenPurple")
    /// Color `goodSamaritan`.
    static let goodSamaritan = Rswift.ColorResource(bundle: R.hostingBundle, name: "goodSamaritan")
    /// Color `icelandPoppy`.
    static let icelandPoppy = Rswift.ColorResource(bundle: R.hostingBundle, name: "icelandPoppy")
    /// Color `jalapenoRed`.
    static let jalapenoRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "jalapenoRed")
    /// Color `pixelatedGrass`.
    static let pixelatedGrass = Rswift.ColorResource(bundle: R.hostingBundle, name: "pixelatedGrass")
    /// Color `reefEncounter`.
    static let reefEncounter = Rswift.ColorResource(bundle: R.hostingBundle, name: "reefEncounter")
    /// Color `spray`.
    static let spray = Rswift.ColorResource(bundle: R.hostingBundle, name: "spray")
    /// Color `yueGuangLanBlue`.
    static let yueGuangLanBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "yueGuangLanBlue")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "auroraGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func auroraGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.auroraGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "baraRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func baraRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.baraRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "forgottenPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func forgottenPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.forgottenPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "goodSamaritan", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func goodSamaritan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.goodSamaritan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "icelandPoppy", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func icelandPoppy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.icelandPoppy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "jalapenoRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func jalapenoRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.jalapenoRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pixelatedGrass", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pixelatedGrass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pixelatedGrass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "reefEncounter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func reefEncounter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.reefEncounter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "spray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yueGuangLanBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yueGuangLanBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yueGuangLanBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "auroraGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func auroraGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.auroraGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "baraRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func baraRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.baraRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "forgottenPurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func forgottenPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.forgottenPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "goodSamaritan", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func goodSamaritan(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.goodSamaritan.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "icelandPoppy", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func icelandPoppy(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.icelandPoppy.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "jalapenoRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func jalapenoRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.jalapenoRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pixelatedGrass", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pixelatedGrass(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pixelatedGrass.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "reefEncounter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func reefEncounter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.reefEncounter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "spray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yueGuangLanBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yueGuangLanBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yueGuangLanBlue.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Lato-Bold.ttf`.
    static let latoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Bold", pathExtension: "ttf")

    /// `bundle.url(forResource: "Lato-Bold", withExtension: "ttf")`
    static func latoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `Lato-Bold`.
    static let latoBold = Rswift.FontResource(fontName: "Lato-Bold")

    /// `UIFont(name: "Lato-Bold", size: ...)`
    static func latoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBold, size: size)
    }

    static func validate() throws {
      if R.font.latoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Bold' could not be loaded, is 'Lato-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 13 images.
  struct image {
    /// Image `Rhino`.
    static let rhino = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rhino")
    /// Image `Squirrel`.
    static let squirrel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Squirrel")
    /// Image `Wolf`.
    static let wolf = Rswift.ImageResource(bundle: R.hostingBundle, name: "Wolf")
    /// Image `animal`.
    static let animal = Rswift.ImageResource(bundle: R.hostingBundle, name: "animal")
    /// Image `colors`.
    static let colors = Rswift.ImageResource(bundle: R.hostingBundle, name: "colors")
    /// Image `dolphin`.
    static let dolphin = Rswift.ImageResource(bundle: R.hostingBundle, name: "dolphin")
    /// Image `elephant`.
    static let elephant = Rswift.ImageResource(bundle: R.hostingBundle, name: "elephant")
    /// Image `fox`.
    static let fox = Rswift.ImageResource(bundle: R.hostingBundle, name: "fox")
    /// Image `jellyfish`.
    static let jellyfish = Rswift.ImageResource(bundle: R.hostingBundle, name: "jellyfish")
    /// Image `kangaroo`.
    static let kangaroo = Rswift.ImageResource(bundle: R.hostingBundle, name: "kangaroo")
    /// Image `seahorse`.
    static let seahorse = Rswift.ImageResource(bundle: R.hostingBundle, name: "seahorse")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `walrus`.
    static let walrus = Rswift.ImageResource(bundle: R.hostingBundle, name: "walrus")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rhino", bundle: ..., traitCollection: ...)`
    static func rhino(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rhino, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Squirrel", bundle: ..., traitCollection: ...)`
    static func squirrel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.squirrel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Wolf", bundle: ..., traitCollection: ...)`
    static func wolf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wolf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "animal", bundle: ..., traitCollection: ...)`
    static func animal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.animal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "colors", bundle: ..., traitCollection: ...)`
    static func colors(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.colors, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dolphin", bundle: ..., traitCollection: ...)`
    static func dolphin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dolphin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "elephant", bundle: ..., traitCollection: ...)`
    static func elephant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.elephant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fox", bundle: ..., traitCollection: ...)`
    static func fox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jellyfish", bundle: ..., traitCollection: ...)`
    static func jellyfish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jellyfish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kangaroo", bundle: ..., traitCollection: ...)`
    static func kangaroo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kangaroo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "seahorse", bundle: ..., traitCollection: ...)`
    static func seahorse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seahorse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walrus", bundle: ..., traitCollection: ...)`
    static func walrus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walrus, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `AnimalsTableCell`.
    static let animalsTableCell = _R.nib._AnimalsTableCell()
    /// Nib `AnimalsVC`.
    static let animalsVC = _R.nib._AnimalsVC()
    /// Nib `ColorCollectionViewCell`.
    static let colorCollectionViewCell = _R.nib._ColorCollectionViewCell()
    /// Nib `ColorsVC`.
    static let colorsVC = _R.nib._ColorsVC()
    /// Nib `SettingContainer`.
    static let settingContainer = _R.nib._SettingContainer()
    /// Nib `SettingsVC`.
    static let settingsVC = _R.nib._SettingsVC()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnimalsTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.animalsTableCell) instead")
    static func animalsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.animalsTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnimalsVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.animalsVC) instead")
    static func animalsVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.animalsVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ColorCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.colorCollectionViewCell) instead")
    static func colorCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.colorCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ColorsVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.colorsVC) instead")
    static func colorsVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.colorsVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingContainer) instead")
    static func settingContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingContainer)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsVC) instead")
    static func settingsVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsVC)
    }
    #endif

    static func animalsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnimalsTableCell? {
      return R.nib.animalsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnimalsTableCell
    }

    static func animalsVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.animalsVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func colorCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColorCollectionViewCell? {
      return R.nib.colorCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorCollectionViewCell
    }

    static func colorsVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.colorsVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func settingContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.settingContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func settingsVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.settingsVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AnimalCell`.
    static let animalCell: Rswift.ReuseIdentifier<AnimalsTableCell> = Rswift.ReuseIdentifier(identifier: "AnimalCell")
    /// Reuse identifier `colorCell`.
    static let colorCell: Rswift.ReuseIdentifier<ColorCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "colorCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// en translation: Animal
      ///
      /// Locales: en, id
      static let animalTab = Rswift.StringResource(key: "animalTab", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Animals On Earth
      ///
      /// Locales: en, id
      static let animalNavTitle = Rswift.StringResource(key: "animalNavTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, id
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Choose Language
      ///
      /// Locales: en, id
      static let changeLanguage = Rswift.StringResource(key: "changeLanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Color
      ///
      /// Locales: en, id
      static let color = Rswift.StringResource(key: "color", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Dolphin
      ///
      /// Locales: en, id
      static let dolphin = Rswift.StringResource(key: "dolphin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Elephant
      ///
      /// Locales: en, id
      static let elephant = Rswift.StringResource(key: "elephant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Fox
      ///
      /// Locales: en, id
      static let fox = Rswift.StringResource(key: "fox", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Jellyfish
      ///
      /// Locales: en, id
      static let jellyfish = Rswift.StringResource(key: "jellyfish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Kangaroo
      ///
      /// Locales: en, id
      static let kangaroo = Rswift.StringResource(key: "kangaroo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, id
      static let language = Rswift.StringResource(key: "language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Rhino
      ///
      /// Locales: en, id
      static let rhino = Rswift.StringResource(key: "rhino", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Seahorse
      ///
      /// Locales: en, id
      static let seahorse = Rswift.StringResource(key: "seahorse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, id
      static let setting = Rswift.StringResource(key: "setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Squirrel
      ///
      /// Locales: en, id
      static let squirrel = Rswift.StringResource(key: "squirrel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Walrus
      ///
      /// Locales: en, id
      static let walrus = Rswift.StringResource(key: "walrus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Wolf
      ///
      /// Locales: en, id
      static let wolf = Rswift.StringResource(key: "wolf", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)

      /// en translation: Animal
      ///
      /// Locales: en, id
      static func animalTab(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("animalTab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "animalTab"
        }

        return NSLocalizedString("animalTab", bundle: bundle, comment: "")
      }

      /// en translation: Animals On Earth
      ///
      /// Locales: en, id
      static func animalNavTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("animalNavTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "animalNavTitle"
        }

        return NSLocalizedString("animalNavTitle", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, id
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Choose Language
      ///
      /// Locales: en, id
      static func changeLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeLanguage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeLanguage"
        }

        return NSLocalizedString("changeLanguage", bundle: bundle, comment: "")
      }

      /// en translation: Color
      ///
      /// Locales: en, id
      static func color(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("color", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "color"
        }

        return NSLocalizedString("color", bundle: bundle, comment: "")
      }

      /// en translation: Dolphin
      ///
      /// Locales: en, id
      static func dolphin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dolphin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dolphin"
        }

        return NSLocalizedString("dolphin", bundle: bundle, comment: "")
      }

      /// en translation: Elephant
      ///
      /// Locales: en, id
      static func elephant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("elephant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "elephant"
        }

        return NSLocalizedString("elephant", bundle: bundle, comment: "")
      }

      /// en translation: Fox
      ///
      /// Locales: en, id
      static func fox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fox", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fox"
        }

        return NSLocalizedString("fox", bundle: bundle, comment: "")
      }

      /// en translation: Jellyfish
      ///
      /// Locales: en, id
      static func jellyfish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jellyfish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "jellyfish"
        }

        return NSLocalizedString("jellyfish", bundle: bundle, comment: "")
      }

      /// en translation: Kangaroo
      ///
      /// Locales: en, id
      static func kangaroo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kangaroo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kangaroo"
        }

        return NSLocalizedString("kangaroo", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, id
      static func language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "language"
        }

        return NSLocalizedString("language", bundle: bundle, comment: "")
      }

      /// en translation: Rhino
      ///
      /// Locales: en, id
      static func rhino(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rhino", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rhino"
        }

        return NSLocalizedString("rhino", bundle: bundle, comment: "")
      }

      /// en translation: Seahorse
      ///
      /// Locales: en, id
      static func seahorse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seahorse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seahorse"
        }

        return NSLocalizedString("seahorse", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, id
      static func setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setting"
        }

        return NSLocalizedString("setting", bundle: bundle, comment: "")
      }

      /// en translation: Squirrel
      ///
      /// Locales: en, id
      static func squirrel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("squirrel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "squirrel"
        }

        return NSLocalizedString("squirrel", bundle: bundle, comment: "")
      }

      /// en translation: Walrus
      ///
      /// Locales: en, id
      static func walrus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walrus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walrus"
        }

        return NSLocalizedString("walrus", bundle: bundle, comment: "")
      }

      /// en translation: Wolf
      ///
      /// Locales: en, id
      static func wolf(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wolf", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wolf"
        }

        return NSLocalizedString("wolf", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AnimalsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AnimalsTableCell

      let bundle = R.hostingBundle
      let identifier = "AnimalCell"
      let name = "AnimalsTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnimalsTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnimalsTableCell
      }

      fileprivate init() {}
    }

    struct _AnimalsVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AnimalsVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ColorCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ColorCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "colorCell"
      let name = "ColorCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColorCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _ColorsVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ColorsVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SettingContainer: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingContainer"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SettingsVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
